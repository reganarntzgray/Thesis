e_static_sim <- as.vector(e_stat_sim)
Y_static <- A_inv_stat%*%(Ynew_hat_static+e_static_sim)
Yield_future_sim_Ontario <- data.frame(county,year,Y_dynamic,Y_static)
sd(Y_static)
sd(Y_dynamic)
colnames(Yield_future_sim_Ontario)<-c("county","year","Y_dynamic","Y_static")
write.table(Yield_future_sim_Ontario,"Yield_future_sim_Ontario")
##future yield with future weather, future trend
####now creating the yields based on simulated data####
Y_change <- A_inv_dyn%*%(Ynew_hat_dynamic)
Yield_future_change_sim_Ontario <- data.frame(county,year,Y_change)
colnames(Yield_future_change_sim_Ontario)<-c("county","year","Y_dynamic")
write.table(Yield_future_change_sim_Ontario,"Yield_future_change_sim_Ontario")
setwd("C:/Users/Regan/Google Drive/Thesis Presentations and Proposal/Thesis/Data needed to complete empirical work/simulated weather/Ontario")
Yield <- read.table("Yield_future_sim_Ontario")
Y_dynamic <- Yield[,3]
Y_static <- Yield[,4]
N <- 32
T <- 100
sd_dyn <- NULL
for(i in 1:N)
{county_yield <- Y_dynamic[seq(i,length(Y_dynamic),N)]
sd_dyn[i]<-sd(county_yield)}
sd_stat <- NULL
for(i in 1:N)
{county_yield <- Y_static[seq(i,length(Y_static),N)]
sd_stat[i]<-sd(county_yield)}
SD_yields <- data.frame(unique(Yield$county),sd_stat,sd_dyn)
colnames(SD_yields)<- c("county","sd_stat","sd_dyn")
write.table(SD_yields,"SD_yields_cur_Ont")
#get non-parametric estimate of yield distribution for each case
n <- T
Dynamic_Kern_Estimate <- function(y)
{
sigma_y<- sd(Y_county)
n <- length(Y_county)
Q3 <- quantile(Y_county)[4]
Q1 <- quantile(Y_county)[2]
range <- (Q3-Q1)/1.34
A <- min(sigma_y^2,range)
h<- 0.9*A*(n^(-1/5))
prob <-(1/(n*h))*sum(dnorm((y-Y_county)/h))
return(prob)}
#calculate the expected loss given a coverage level and compute the county specific premia levels - compare the dynamic to static results
#APH is the average county yield over the past 10 years#
yield <- Y_static
APH <- NULL
for(i in 1:N)
{
yield_county <- yield[seq(i,length(yield),N)]
APH[i] <- mean(yield_county)
}
coverage <- 0.9
insured_amount <- coverage*APH
by <- insured_amount/1000
grid <- matrix(0,1000,N)
for(i in 1:N)
{grid[,i] <- seq((0+(by[i]/2)),insured_amount[i],by[i])}
probability <- matrix(0,N,1000)
premium_dyn <- NULL
for (i in 1:N)
{   Y_county <- Y_dynamic[seq(i,length(Y_dynamic),N)]
int <- NULL
for(j in 1:1000)
{y <- grid[j,i]
payout <- (APH[i]-y)
prob <- Dynamic_Kern_Estimate(y)
probability[i,j]<-prob
int[j]<-prob*payout*by[i]
}
premium_dyn[i]<-(1/i)*sum(int)
print(i)}
premium_stat <- NULL
for (i in 1:N)
{   Y_county <- Y_static[seq(i,length(Y_static),N)]
int <- NULL
for(j in 1:1000)
{y <- grid[j,i]
payout <- (APH[i]-y)
prob <- Dynamic_Kern_Estimate(y)
int[j]<-prob*payout*by[i]
}
premium_stat[i]<-(1/i)*sum(int)
print(i)}
ratio <- premium_stat/premium_dyn
county <- unique(Yield$county[1:32])
setwd("C:/Users/Regan/Google Drive/Thesis Presentations and Proposal/Thesis/Data needed to complete empirical work/simulated weather/Ontario")
Premiums_Ontario_future <- data.frame(county,premium_dyn,premium_stat,ratio)
write.table(Premiums_Ontario_future,"Premiums_Ontario_future")
install.packages("stargazer")
library(stargazer)
stargazer(Premiums_Ontario_future, nobs=F,summary.logical = F, flip=TRUE)
t_ratio_mean = t.test(ratio,mu=1,conf.level =.95)
#paired t test#
t_paired = t.test(premium_stat,premium_dyn,paired = TRUE, conf.level = .99)
n <- sum((premium_dyn-premium_stat)>0)
install.packages("stargazer")
t_paired
setwd("C:/Users/Regan/Google Drive/Thesis Presentations and Proposal/Thesis/Data needed to complete empirical work/Data sets for model testing/Ontario")
N <- 32
T <- 64
Dummy <- diag(N)
Dummy <- matrix( rep( t( Dummy) , T ) , ncol = ncol(Dummy) , byrow = TRUE )
W <- read.delim("W_ONT_norm.txt", header=F)
W <- as.matrix(W)
K <- kronecker(diag(T),W)
yield_data <- readRDS("Data_d_iii_ont")
setwd("C:/Users/Regan/Google Drive/Thesis Presentations and Proposal/Thesis/Data needed to complete empirical work/simulated weather/Ontario")
df <- readRDS("Data_d_iii_ont_sim_future")
df[,4]<- rep(15,nrow(df))
counties <- c("brant","bruce","chatham-kent","dufferin","elgin","essex","grey","haldimand-norfolk",
"halton","hamilton","hastings","huron","kawartha lakes","lambton","lanark",
"leeds-grenville","lennox-addington","middlesex","niagara","northumberland",
"ottawa","oxford","peel","perth","prescott-russell","prince edward","renfrew",
"simcoe","stormont-dundas-glengarry","waterloo","wellington","york")
df <- df[df$county %in% counties,]
df[,3]<-rep(65,nrow(df))
attach(df)
p_opt_dyn <- read.table("p_opt_dyn")
p_opt_dyn <- p_opt_dyn[1,1]
p_opt_stat <- read.table("p_opt_stat")
p_opt_stat <- p_opt_stat[1,1]
A_dyn <- (diag(N*T)-(p_opt_dyn*K))
A_stat <- (diag(N*T)-(p_opt_stat*K))
A_inv_dyn <- read.table("A_inv_dyn")
A_inv_dyn <- as.matrix(A_inv_dyn)
A_inv_stat <- read.table("A_inv_stat")
A_inv_stat <- as.matrix(A_inv_stat)
Beta_dynamic <- read.table("Beta_dynamic")
Beta_dynamic <- as.matrix(Beta_dynamic)
Beta_static <- read.table("Beta_static")
Beta_static <- as.matrix(Beta_static)
sd_e_dyn_county <- read.table("sd_e_dyn_county")
sd_e_dyn_county <- as.vector(sd_e_dyn_county)
sd_e_stat_county <- read.table("sd_e_stat_county")
sd_e_stat_county <- as.vector(sd_e_stat_county)
thresholds_dynamic <- read.table("thresholds_dynamic")
threshold_static <- read.table("threshold_static")
####now creating the yields based on simulated data####
T <- 100
Dummy <- diag(N)
Dummy <- matrix( rep( t( Dummy) , T ) , ncol = ncol(Dummy) , byrow = TRUE )
K <- kronecker(diag(T),W)
A_dyn <- (diag(N*T)-(p_opt_dyn*K))
A_stat <- (diag(N*T)-(p_opt_stat*K))
k_dynamic <- thresholds_dynamic[1,1]+thresholds_dynamic[2,1]*141
k_static <- threshold_static[1,1]
const <- rep(1,N*T)
X1_dynamic <- as.matrix(cbind(df[,3:ncol(df)],Dummy[,1:31]))
pcp_july_sp_d <- (mean_pcp_july-k_dynamic)*(mean_pcp_july>k_dynamic)
X_dynamic <- cbind(X1_dynamic,pcp_july_sp_d)
Xnew_dynamic <- A_dyn%*%X_dynamic
Ynew_hat_dynamic <- cbind(const,Xnew_dynamic)%*%Beta_dynamic
set.seed(154251461) #odynf1
e_dyn_sim <- matrix(0,N,T)
for(i in 1:N)
{e_dyn_sim[i,]<- rnorm(T,0,sd_e_dyn_county[i,1])}
e_dynamic_sim <- as.vector(e_dyn_sim)
Y_dynamic <- A_inv_dyn%*%(Ynew_hat_dynamic+e_dynamic_sim)
#Static yields
const <- rep(1,N*T)
X1_static <- as.matrix(cbind(df[,3:ncol(df)],Dummy[,1:31]))
pcp_july_sp_s <- (mean_pcp_july-k_static)*(mean_pcp_july>k_static)
X_static <- cbind(X1_static,pcp_july_sp_s)
Xnew_static <- A_stat%*%X_static
Ynew_hat_static <- cbind(const,Xnew_static)%*%Beta_static
set.seed(15192061) #ostf1
e_stat_sim <- matrix(0,N,T)
for(i in 1:N)
{e_stat_sim[i,]<- rnorm(T,0,sd_e_stat_county[i,1])}
e_static_sim <- as.vector(e_stat_sim)
Y_static <- A_inv_stat%*%(Ynew_hat_static+e_static_sim)
Yield_future_sim_Ontario <- data.frame(county,year,Y_dynamic,Y_static)
colnames(Yield_future_sim_Ontario)<-c("county","year","Y_dynamic","Y_static")
write.table(Yield_future_sim_Ontario,"Yield_future_sim_Ontario")
##future yield with future weather, future trend
####now creating the yields based on simulated data####
Y_change <- A_inv_dyn%*%(Ynew_hat_dynamic)
Yield_future_change_sim_Ontario <- data.frame(county,year,Y_change)
colnames(Yield_future_change_sim_Ontario)<-c("county","year","Y_dynamic")
write.table(Yield_future_change_sim_Ontario,"Yield_future_change_sim_Ontario")
setwd("C:/Users/Regan/Google Drive/Thesis Presentations and Proposal/Thesis/Data needed to complete empirical work/simulated weather/Ontario")
Yield <- read.table("Yield_future_sim_Ontario")
Y_dynamic <- Yield[,3]
Y_static <- Yield[,4]
N <- 32
T <- 100
sd_dyn <- NULL
for(i in 1:N)
{county_yield <- Y_dynamic[seq(i,length(Y_dynamic),N)]
sd_dyn[i]<-sd(county_yield)}
sd_stat <- NULL
for(i in 1:N)
{county_yield <- Y_static[seq(i,length(Y_static),N)]
sd_stat[i]<-sd(county_yield)}
SD_yields <- data.frame(unique(Yield$county),sd_stat,sd_dyn)
colnames(SD_yields)<- c("county","sd_stat","sd_dyn")
write.table(SD_yields,"SD_yields_cur_Ont")
#get non-parametric estimate of yield distribution for each case
n <- T
Dynamic_Kern_Estimate <- function(y)
{
sigma_y<- sd(Y_county)
n <- length(Y_county)
Q3 <- quantile(Y_county)[4]
Q1 <- quantile(Y_county)[2]
range <- (Q3-Q1)/1.34
A <- min(sigma_y^2,range)
h<- 0.9*A*(n^(-1/5))
prob <-(1/(n*h))*sum(dnorm((y-Y_county)/h))
return(prob)}
#calculate the expected loss given a coverage level and compute the county specific premia levels - compare the dynamic to static results
#APH is the average county yield over the past 10 years#
yield <- Y_static
APH <- NULL
for(i in 1:N)
{
yield_county <- yield[seq(i,length(yield),N)]
APH[i] <- mean(yield_county)
}
coverage <- 0.9
insured_amount <- coverage*APH
by <- insured_amount/1000
grid <- matrix(0,1000,N)
for(i in 1:N)
{grid[,i] <- seq((0+(by[i]/2)),insured_amount[i],by[i])}
probability <- matrix(0,N,1000)
premium_dyn <- NULL
for (i in 1:N)
{   Y_county <- Y_dynamic[seq(i,length(Y_dynamic),N)]
int <- NULL
for(j in 1:1000)
{y <- grid[j,i]
payout <- (APH[i]-y)
prob <- Dynamic_Kern_Estimate(y)
probability[i,j]<-prob
int[j]<-prob*payout*by[i]
}
premium_dyn[i]<-(1/i)*sum(int)
print(i)}
premium_stat <- NULL
for (i in 1:N)
{   Y_county <- Y_static[seq(i,length(Y_static),N)]
int <- NULL
for(j in 1:1000)
{y <- grid[j,i]
payout <- (APH[i]-y)
prob <- Dynamic_Kern_Estimate(y)
int[j]<-prob*payout*by[i]
}
premium_stat[i]<-(1/i)*sum(int)
print(i)}
ratio <- premium_stat/premium_dyn
county <- unique(Yield$county[1:32])
setwd("C:/Users/Regan/Google Drive/Thesis Presentations and Proposal/Thesis/Data needed to complete empirical work/simulated weather/Ontario")
Premiums_Ontario_future <- data.frame(county,premium_dyn,premium_stat,ratio)
write.table(Premiums_Ontario_future,"Premiums_Ontario_future")
install.packages("stargazer")
library(stargazer)
stargazer(Premiums_Ontario_future, nobs=F,summary.logical = F, flip=TRUE)
t_ratio_mean = t.test(ratio,mu=1,conf.level =.95)
#paired t test#
t_paired = t.test(premium_stat,premium_dyn,paired = TRUE, conf.level = .99)
n <- sum((premium_dyn-premium_stat)>0)
install.packages("stargazer")
setwd("C:/Users/Regan/Google Drive/Thesis Presentations and Proposal/Thesis/Data needed to complete empirical work/simulated weather/Iowa")
Yield <- read.table("Yield_future_sim_Iowa")
Y_dynamic <- Yield[,3]
Y_static <- Yield[,4]
sd(Y_dynamic)
sd(Y_static)
N <- 99
T <- 100
sd_dyn <- NULL
for(i in 1:N)
{county_yield <- Y_dynamic[seq(i,length(Y_dynamic),N)]
sd_dyn[i]<-sd(county_yield)}
sd_stat <- NULL
for(i in 1:N)
{county_yield <- Y_static[seq(i,length(Y_static),N)]
sd_stat[i]<-sd(county_yield)}
SD_yields <- data.frame(unique(Yield$county),sd_stat,sd_dyn)
colnames(SD_yields)<- c("county","sd_stat","sd_dyn")
write.table(SD_yields,"SD_yields_fut_Iowa")
#get non-parametric estimate of yield distribution for each case
n <- T
Dynamic_Kern_Estimate <- function(y)
{
sigma_y<- sd(Y_county)
n <- length(Y_county)
Q3 <- quantile(Y_county)[4]
Q1 <- quantile(Y_county)[2]
range <- (Q3-Q1)/1.34
A <- min(sigma_y^2,range)
h<- 0.9*A*(n^(-1/5))
prob <-(1/(n*h))*sum(dnorm((y-Y_county)/h))
return(prob)}
#calculate the expected loss given a coverage level and compute the county specific premia levels - compare the dynamic to static results
#APH is the average county yield from dynamic yield estimates#
yield <- Y_static
APH <- NULL
for(i in 1:N)
{
yield_county <- yield[seq(i,length(yield),N)]
APH[i] <- mean(yield_county)
}
coverage <- 0.9
insured_amount <- coverage*APH
by <- insured_amount/1000
grid <- matrix(0,1000,N)
for(i in 1:N)
{grid[,i] <- seq((0+(by[i]/2)),insured_amount[i],by[i])}
probability <- matrix(0,N,1000)
premium_dyn <- NULL
for (i in 1:N)
{   Y_county <- Y_dynamic[seq(i,length(Y_dynamic),N)]
int <- NULL
for(j in 1:1000)
{y <- grid[j,i]
payout <- (APH[i]-y)
prob <- Dynamic_Kern_Estimate(y)
probability[i,j]<-prob
int[j]<-prob*payout*by[i]
}
premium_dyn[i]<-(1/i)*sum(int)
print(i)}
premium_stat <- NULL
for (i in 1:N)
{   Y_county <- Y_static[seq(i,length(Y_static),N)]
int <- NULL
for(j in 1:1000)
{y <- grid[j,i]
payout <- (APH[i]-y)
prob <- Dynamic_Kern_Estimate(y)
int[j]<-prob*payout*by[i]
}
premium_stat[i]<-(1/i)*sum(int)
print(i)}
ratio <- premium_stat/premium_dyn
county <- unique(Yield$county)
setwd("C:/Users/Regan/Google Drive/Thesis Presentations and Proposal/Thesis/Data needed to complete empirical work/simulated weather/Iowa")
Premiums_Iowa_future <- data.frame(county,premium_dyn,premium_stat,ratio)
read.table("Beta_dynamic")
read.table("Beta_static")
read.table("Beta_static")[8:19]
dyn=read.table("Beta_dynamic")
stat=read.table("Beta_static")
dyn[1:19]
dyn[1:18]
dyn[1:18,1]
dyn[1:19,1]
dyn[1:20,1]
dyn[1:19,1]
stat[1:19,1]
read.table("p_opt_stat")
read.table("p_opt_dyn")
rm(list=ls())
setwd("C:/Users/Regan/Google Drive/Thesis Presentations and Proposal/Thesis/Data needed to complete empirical work/simulated weather/Ontario")
Yield <- read.table("Yield_future_sim_Ontario")
Y_dynamic <- Yield[,3]
Y_static <- Yield[,4]
N <- 32
T <- 100
sd_dyn <- NULL
for(i in 1:N)
{county_yield <- Y_dynamic[seq(i,length(Y_dynamic),N)]
sd_dyn[i]<-sd(county_yield)}
sd_stat <- NULL
for(i in 1:N)
{county_yield <- Y_static[seq(i,length(Y_static),N)]
sd_stat[i]<-sd(county_yield)}
SD_yields <- data.frame(unique(Yield$county),sd_stat,sd_dyn)
colnames(SD_yields)<- c("county","sd_stat","sd_dyn")
write.table(SD_yields,"SD_yields_cur_Ont")
#get non-parametric estimate of yield distribution for each case
n <- T
Dynamic_Kern_Estimate <- function(y)
{
sigma_y<- sd(Y_county)
n <- length(Y_county)
Q3 <- quantile(Y_county)[4]
Q1 <- quantile(Y_county)[2]
range <- (Q3-Q1)/1.34
A <- min(sigma_y^2,range)
h<- 0.9*A*(n^(-1/5))
prob <-(1/(n*h))*sum(dnorm((y-Y_county)/h))
return(prob)}
#calculate the expected loss given a coverage level and compute the county specific premia levels - compare the dynamic to static results
#APH is the average county yield over the past 10 years#
yield <- Y_dynamic
APH <- NULL
for(i in 1:N)
{
yield_county <- yield[seq(i,length(yield),N)]
APH[i] <- mean(yield_county)
}
coverage <- 0.9
insured_amount <- coverage*APH
by <- insured_amount/1000
grid <- matrix(0,1000,N)
for(i in 1:N)
{grid[,i] <- seq((0+(by[i]/2)),insured_amount[i],by[i])}
probability <- matrix(0,N,1000)
premium_dyn <- NULL
for (i in 1:N)
{   Y_county <- Y_dynamic[seq(i,length(Y_dynamic),N)]
int <- NULL
for(j in 1:1000)
{y <- grid[j,i]
payout <- (APH[i]-y)
prob <- Dynamic_Kern_Estimate(y)
probability[i,j]<-prob
int[j]<-prob*payout*by[i]
}
premium_dyn[i]<-(1/i)*sum(int)
print(i)}
premium_stat <- NULL
for (i in 1:N)
{   Y_county <- Y_static[seq(i,length(Y_static),N)]
int <- NULL
for(j in 1:1000)
{y <- grid[j,i]
payout <- (APH[i]-y)
prob <- Dynamic_Kern_Estimate(y)
int[j]<-prob*payout*by[i]
}
premium_stat[i]<-(1/i)*sum(int)
print(i)}
ratio <- premium_stat/premium_dyn
county <- unique(Yield$county[1:32])
setwd("C:/Users/Regan/Google Drive/Thesis Presentations and Proposal/Thesis/Data needed to complete empirical work/simulated weather/Ontario")
Premiums_Ontario_future <- data.frame(county,premium_dyn,premium_stat,ratio)
mean(ratio)
t_paired = t.test(premium_stat,premium_dyn,paired = TRUE, conf.level = .99)
t_paired
rm(list=ls())
setwd("C:/Users/Regan/Google Drive/Thesis Presentations and Proposal/Thesis/Data needed to complete empirical work/simulated weather/Iowa")
Yield <- read.table("Yield_future_sim_Iowa")
Y_dynamic <- Yield[,3]
Y_static <- Yield[,4]
N <- 99
T <- 100
sd_dyn <- NULL
for(i in 1:N)
{county_yield <- Y_dynamic[seq(i,length(Y_dynamic),N)]
sd_dyn[i]<-sd(county_yield)}
sd_stat <- NULL
for(i in 1:N)
{county_yield <- Y_static[seq(i,length(Y_static),N)]
sd_stat[i]<-sd(county_yield)}
SD_yields <- data.frame(unique(Yield$county),sd_stat,sd_dyn)
colnames(SD_yields)<- c("county","sd_stat","sd_dyn")
write.table(SD_yields,"SD_yields_fut_Iowa")
#get non-parametric estimate of yield distribution for each case
n <- T
Dynamic_Kern_Estimate <- function(y)
{
sigma_y<- sd(Y_county)
n <- length(Y_county)
Q3 <- quantile(Y_county)[4]
Q1 <- quantile(Y_county)[2]
range <- (Q3-Q1)/1.34
A <- min(sigma_y^2,range)
h<- 0.9*A*(n^(-1/5))
prob <-(1/(n*h))*sum(dnorm((y-Y_county)/h))
return(prob)}
yield <- Y_dynamic
APH <- NULL
for(i in 1:N)
{
yield_county <- yield[seq(i,length(yield),N)]
APH[i] <- mean(yield_county)
}
coverage <- 0.9
insured_amount <- coverage*APH
by <- insured_amount/1000
grid <- matrix(0,1000,N)
for(i in 1:N)
{grid[,i] <- seq((0+(by[i]/2)),insured_amount[i],by[i])}
probability <- matrix(0,N,1000)
premium_dyn <- NULL
for (i in 1:N)
{   Y_county <- Y_dynamic[seq(i,length(Y_dynamic),N)]
int <- NULL
for(j in 1:1000)
{y <- grid[j,i]
payout <- (APH[i]-y)
prob <- Dynamic_Kern_Estimate(y)
probability[i,j]<-prob
int[j]<-prob*payout*by[i]
}
premium_dyn[i]<-(1/i)*sum(int)
print(i)}
premium_stat <- NULL
for (i in 1:N)
{   Y_county <- Y_static[seq(i,length(Y_static),N)]
int <- NULL
for(j in 1:1000)
{y <- grid[j,i]
payout <- (APH[i]-y)
prob <- Dynamic_Kern_Estimate(y)
int[j]<-prob*payout*by[i]
}
premium_stat[i]<-(1/i)*sum(int)
print(i)}
ratio <- premium_stat/premium_dyn
county <- unique(Yield$county)
setwd("C:/Users/Regan/Google Drive/Thesis Presentations and Proposal/Thesis/Data needed to complete empirical work/simulated weather/Iowa")
Premiums_Iowa_future <- data.frame(county,premium_dyn,premium_stat,ratio)
mean(ratio)
t_paired = t.test(premium_stat,premium_dyn,paired = TRUE,alternative = "greater", conf.level = .99)
t_paired
